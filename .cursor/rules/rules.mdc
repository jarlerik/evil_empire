---
description: React Native/Expo mobile app development rules for kakkahata_88
globs: ["apps/mobile/kakkahata_88/**/*.ts", "apps/mobile/kakkahata_88/**/*.tsx", "apps/mobile/kakkahata_88/**/*.js", "apps/mobile/kakkahata_88/**/*.jsx"]
alwaysApply: true
---

# React Native/Expo Development Rules

You are an expert in TypeScript, React Native, Expo, and Mobile UI development.

Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.
- Follow Expo's official documentation for setting up and configuring your projects: https://docs.expo.dev/

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.
- Use strict mode in TypeScript for better type safety.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.
- Use Prettier for consistent code formatting.

UI and Styling
- Use Expo's built-in components for common UI patterns and layouts.
- Implement responsive design with Flexbox and Expo's useWindowDimensions for screen size adjustments.
- Use styled-components or Tailwind CSS for component styling.
- Implement dark mode support using Expo's useColorScheme.
- Ensure high accessibility (a11y) standards using ARIA roles and native accessibility props.
- Leverage react-native-reanimated and react-native-gesture-handler for performant animations and gestures.

Safe Area Management
- Use SafeAreaProvider from react-native-safe-area-context to manage safe areas globally in your app.
- Wrap top-level components with SafeAreaView to handle notches, status bars, and other screen insets on both iOS and Android.
- Use SafeAreaScrollView for scrollable content to ensure it respects safe area boundaries.
- Avoid hardcoding padding or margins for safe areas; rely on SafeAreaView and context hooks.

Performance Optimization
- Minimize the use of useState and useEffect; prefer context and reducers for state management.
- Use Expo's AppLoading and SplashScreen for optimized app startup experience.
- Optimize images: use WebP format where supported, include size data, implement lazy loading with expo-image.
- Implement code splitting and lazy loading for non-critical components with React's Suspense and dynamic imports.
- Profile and monitor performance using React Native's built-in tools and Expo's debugging features.
- Avoid unnecessary re-renders by memoizing components and using useMemo and useCallback hooks appropriately.

Navigation
- Use react-navigation for routing and navigation; follow its best practices for stack, tab, and drawer navigators.
- Leverage deep linking and universal links for better user engagement and navigation flow.
- Use dynamic routes with expo-router for better navigation handling.

State Management
- Use React Context and useReducer for managing global state.
- Leverage react-query for data fetching and caching; avoid excessive API calls.
- For complex state management, consider using Zustand or Redux Toolkit.
- Handle URL search parameters using libraries like expo-linking.

Error Handling and Validation
- Use Zod for runtime validation and error handling.
- Implement proper error logging using Sentry or a similar service.
- Prioritize error handling and edge cases:
  - Handle errors at the beginning of functions.
  - Use early returns for error conditions to avoid deeply nested if statements.
  - Avoid unnecessary else statements; use if-return pattern instead.
  - Implement global error boundaries to catch and handle unexpected errors.
- Use expo-error-reporter for logging and reporting errors in production.

Testing
- Write unit tests using Jest and React Native Testing Library.
- Implement integration tests for critical user flows using Detox.
- Use Expo's testing tools for running tests in different environments.
- Consider snapshot testing for components to ensure UI consistency.

Security
- Sanitize user inputs to prevent XSS attacks.
- Use react-native-encrypted-storage for secure storage of sensitive data.
- Ensure secure communication with APIs using HTTPS and proper authentication.
- Use Expo's Security guidelines to protect your app: https://docs.expo.dev/guides/security/

Internationalization (i18n)
- Use react-native-i18n or expo-localization for internationalization and localization.
- Support multiple languages and RTL layouts.
- Ensure text scaling and font adjustments for accessibility.

Package Management (pnpm)
- Use pnpm as the primary package manager
- Required version: pnpm >= 8.x
- Global setup: `curl -fsSL https://get.pnpm.io/install.sh | sh -`
- Install global packages with pnpm:
  - expo-cli: `pnpm add -g expo-cli`
  - eas-cli: `pnpm add -g eas-cli`
- Configure .npmrc for pnpm:
  ```
  engine-strict=true
  auto-install-peers=true
  strict-peer-dependencies=false
  prefer-workspace-packages=true
  ```
- Use pnpm-workspace.yaml for monorepo configuration
- Always commit pnpm-lock.yaml
- Use `pnpm install --frozen-lockfile` in CI environments

Environment Setup
- Required Versions
  - Node.js >= 18.x (LTS recommended)
  - pnpm >= 8.x (preferred package manager)
  - Expo CLI latest version
  - Xcode 14+ (for iOS development)
  - Android Studio Latest (for Android development)

Version Control Guidelines
- Git Workflow
  - Use feature branches branched from main/master
  - Branch naming: `type/description` (e.g., feature/auth-flow, fix/crash-on-startup)
  - Types: feature, fix, chore, docs, test, refactor
  - Keep branches short-lived and focused on single features/fixes

- Commit Messages
  - Follow Conventional Commits specification
  - Format: `type(scope): description` (e.g., feat(auth): add biometric login)
  - Types: feat, fix, docs, style, refactor, test, chore
  - Write descriptive messages in present tense
  - Include ticket/issue numbers if applicable

CI/CD Guidelines
- Build Process
  - Use EAS Build for consistent builds across environments
  - Configure build profiles in eas.json for different environments
  - Use build cache for faster builds
  - Run type checking and tests before builds
  - Use pnpm install --frozen-lockfile in CI for deterministic builds

- Environment Management
  - Use app.config.js for dynamic configuration
  - Store sensitive values in EAS Secrets
  - Follow environment variable naming convention:
    - EXPO_PUBLIC_ prefix for public variables
    - Maintain separate .env files per environment
  - Document all required environment variables

- Release Process
  - Use semantic versioning (MAJOR.MINOR.PATCH)
  - Maintain CHANGELOG.md following Keep a Changelog format
  - Tag releases in git
  - Use EAS Submit for store submissions
  - Configure automatic builds for release branches

- Quality Gates
  - Run ESLint and Prettier checks
  - Ensure all tests pass
  - Check bundle size and performance metrics
  - Verify TypeScript compilation
  - Run security vulnerability scans
  - Check code coverage thresholds
  - Validate iOS and Android specific requirements

Follow Expo's official documentation for detailed information on EAS Build and Submit:
https://docs.expo.dev/build/introduction/
https://docs.expo.dev/submit/introduction/ 